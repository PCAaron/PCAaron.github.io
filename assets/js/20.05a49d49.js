(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{218:function(n,e,t){"use strict";t.r(e);var s=t(0),a=Object(s.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"ico智能合约开发和remix测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ico智能合约开发和remix测试"}},[n._v("#")]),n._v(" ICO智能合约开发和Remix测试")]),n._v(" "),t("h2",{attrs:{id:"ico合约初版"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ico合约初版"}},[n._v("#")]),n._v(" ICO合约初版")]),n._v(" "),t("blockquote",[t("p",[n._v("撸个简单的智能合约，完成ICO参与，发起资金支出，投票，完成支出等模块功能")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("pragma solidity ^0.4.17;\n\ncontract Project {\n    // 定义Payment结构体\n    struct Payment{\n        string description;\n        // 状态变量uint(会永久存储在合约的存储空间)\n        uint amount;\n        address receiver;\n        bool completed;\n        address[] voters;\n    }\n\n    /**\n    合约属性声明\n    owner，项目所有者；\n    description，项目介绍；\n    minInvest，最小投资金额；\n    maxInvest，最大投资金额；\n    goal，融资上限；\n    investors，投资人列表；\n    payments，资金支出列表；\n    **/\n    address public owner;\n    string public description;\n    uint public minInvest;\n    uint public maxInvest;\n    uint public goal;\n    address[] public investors;\n    Payment[] public payments;\n\n    // 定义构造器:在合约的构造器中，不能使用this调用函数，因为当前合约还没有创建完成\n    constructor(string _description,uint _minInvest,uint _maxInvest,uint _goal) public{\n        owner=msg.sender;\n        description=_description;\n        minInvest=_minInvest;\n        maxInvest=_maxInvest;\n        goal=_goal;\n    }\n\n    /**\n    contribute:参与项目投资的接口\n    投资人调用该接口时要求发送满足条件的资金，并且要求没有达到募资上线，这是所有合约接口中标记为 payable 的接口，即接受用户在交易中发送 ETH\n    msg、require 是 Solidity中的全局变量，另还有block、now、tx等(见http://solidity.readthedocs.io/en/v0.4.24/units-and-global-variables.html#block-and-transaction-properties)\n    msg包含了当前交易上的关键信息：\n        msg.data，交易中携带的数据，在我们的代码中没有用到；\n        msg.sender，发起交易的账户，在众筹合约中大量使用，记录投资者和投票；\n        msg.value，交易发送的转账金额，比如投资金额检查就用到了，需要注意的是 msg.value 的单位是 wei...\n    require : Solidity 提供的断言机制,如果不满足交易则回滚\n    */\n    function contribute() public payable{\n        require(msg.value >= minInvest);\n        require(msg.value <= maxInvest);\n        require(address(this).balance <= goal);\n        investors.push(msg.sender);\n    }\n\n    /**\n    createPayment:发起资金支出请求\n    要求传入资金支出的细节信息\n    */\n    function createPayment(string _description, uint _amount, address _receiver) public {\n        Payment memory newPayment = Payment({\n            description:_description,\n            amount:_amount,\n            receiver:_receiver,\n            completed:false,\n            voters:new address[](0)\n            });\n        payments.push(newPayment);\n    }\n\n    /**\n    approvePayment:，投票赞成某个资金支出请求\n    需要指定是哪条请求，要求投票的人是投资人，并且没有重复投票\n    */\n    function approvePayment(uint index) public{\n        Payment storage payment=payments[index];\n        bool isInvestor=false;\n        for(uint i=0;i<investors.length;i++){\n            isInvestor=investors[i] == msg.sender;\n            if(isInvestor){\n                break;\n            }\n        }\n        require(isInvestor);\n\n        bool hasVoted =false;\n        for(uint j=0;j<payments.length;j++){\n            hasVoted=payment.voters[j]==msg.sender;\n            if(hasVoted){\n                break;\n            }\n        }\n        require(!hasVoted);\n        payment.voters.push(msg.sender);\n    }\n\n    /**\n    doPayment:完成资金支出\n    需要指定是哪笔支出，即调用该接口给资金接收方转账，不能重复转账，并且赞成票数超过投资人数量的 50%\n    */\n    function doPayment(uint index) public{\n        Payment storage payment=payments[index];\n        require(!payment.completed);\n        require(payment.voters.length > (investors.length / 2));\n        payment.receiver.transfer(payment.amount);\n        payment.completed=true;\n    }\n}\n\n\n")])])]),t("h2",{attrs:{id:"remix合约校验"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#remix合约校验"}},[n._v("#")]),n._v(" Remix合约校验")]),n._v(" "),t("blockquote",[t("p",[n._v("将智能合约源码放到"),t("a",{attrs:{href:"https://remix.ethereum.org/",target:"_blank",rel:"noopener noreferrer"}},[n._v("Remix"),t("OutboundLink")],1),n._v("上进行测试")])]),n._v(" "),t("ol",[t("li",[n._v("项目方身份创建:填写Deploy部署相关字段（描述，最低最高投资及总额等），transact办理即可\n"),t("img",{attrs:{src:"/images/shizhan3_1.png",alt:"项目方"}})]),n._v(" "),t("li",[n._v("投资项目:\n"),t("ol",[t("li",[n._v("contribute 不需要填写参数，但是需要我们填写转账交易金额")]),n._v(" "),t("li",[n._v("contribute 接口调用本质是发起了 Transaction，界面上看不到反馈，但在交易日志区域能看到新内容(截图2)")]),n._v(" "),t("li",[n._v("investors查看投资人的信息(截图3)\n"),t("img",{attrs:{src:"/images/shizhan3_2.png",alt:"投资"}}),n._v(" "),t("img",{attrs:{src:"/images/shizhan3_3.png",alt:"console"}}),n._v(" "),t("img",{attrs:{src:"/images/shizhan3_4.png",alt:"投资人1"}})])])]),n._v(" "),t("li",[n._v("请求支出资金:\n"),t("ol",[t("li",[n._v("createPayment中填写对应参数")]),n._v(" "),t("li",[n._v("payments查看详细的交易记录\n"),t("img",{attrs:{src:"/images/shizhan3_5.png",alt:"请求支出"}}),n._v(" "),t("img",{attrs:{src:"/images/shizhan3_6.png",alt:"createPayment记录"}}),n._v(" "),t("img",{attrs:{src:"/images/shizhan3_7.png",alt:"payments记录"}})])])]),n._v(" "),t("li",[n._v("资金请求投票(切换到投资人身份，给资金支出请求投票)/资金划转(项目方的身份，对投完票的资金支出进行资金划转)\n1.切换账号，approvePayment[0]进行投票并payments[0]查看状态\n2.切换项目方账号，doPayment[0]完成资金支出并payments[0]查看状态")])]),n._v(" "),t("h2",{attrs:{id:"star-or-打赏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#star-or-打赏"}},[n._v("#")]),n._v(" star or 打赏")]),n._v(" "),t("blockquote",[t("p",[n._v("Imtoken地址: 0x4a6Ac825993737a4f7F1ed12fcAc1b27e247c55A")])]),n._v(" "),t("blockquote",[t("p",[n._v("打赏码\n"),t("img",{attrs:{src:"/wxzz.jpg",alt:"赞助支持"}})])])])}),[],!1,null,null,null);e.default=a.exports}}]);