(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{223:function(t,a,s){"use strict";s.r(a);var r=s(0),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"渲染流程：html、css和javascript是如何变成页面的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染流程：html、css和javascript是如何变成页面的"}},[t._v("#")]),t._v(" 渲染流程：HTML、CSS和JavaScript是如何变成页面的?")]),t._v(" "),s("p",[t._v("HTML转换为页面，其实就是HTML、CSS、JavaScript通过中间渲染模块的处理，\n最终输出为页面。")]),t._v(" "),s("p",[t._v("HTML、CSS和JavaScript的含义："),s("br"),t._v(" "),s("img",{attrs:{src:"/chrome/draw1.png",alt:"HTML、CSS和JavaScript"}})]),t._v(" "),s("p",[s("strong",[t._v("HTML，超文本标记语言，由标记和文本组成")]),t._v("。标记也称为"),s("strong",[t._v("标签")]),t._v("，每个标签都有它\n的语意，浏览器会根据标签的语意来正确展示HTML内容。")]),t._v(" "),s("p",[s("strong",[t._v("CSS，层叠样式表，由选择器和属性组成")]),t._v("，通过CSS可以改变HTML的字体颜色，大小等信息。")]),t._v(" "),s("p",[s("strong",[t._v("JavaScript，一种应用于web端的轻量级，解释型或即时编译型的编程语言")]),t._v("。一般会作为\n页面脚本，实现页面动态效果。")]),t._v(" "),s("p",[t._v("了解了HTML、CSS、JavaScript后，我们开始分析渲染模块。")]),t._v(" "),s("p",[t._v("渲染模块在执行过程中会被划分为很多子阶段，输入的HTML经过子阶段最后输出\n像素，这样的一个处理流程叫"),s("strong",[t._v("渲染流水线")]),t._v("。")]),t._v(" "),s("p",[t._v("渲染流水线示意图："),s("br"),t._v(" "),s("img",{attrs:{src:"/chrome/draw2.png",alt:"渲染流水线"}})]),t._v(" "),s("p",[t._v("按照渲染的时间顺序，流水线可分为："),s("strong",[t._v("构建DOM树、样式计算、布局阶段、分层、绘制、\n分块、光栅化和合成")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"构建dom树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构建dom树"}},[t._v("#")]),t._v(" 构建DOM树")]),t._v(" "),s("p",[s("strong",[t._v("由于浏览器无法直接解析HTML，所以需要将HTML转换为浏览器能够理解的结构，DOM树")]),t._v("。")]),t._v(" "),s("p",[t._v("树结构类似于生活中的“树”，其中每个点称为"),s("strong",[t._v("节点")]),t._v("，相连的节点称为"),s("strong",[t._v("父子节点")]),t._v("。")]),t._v(" "),s("p",[t._v("DOM树构建过程示意图："),s("br"),t._v(" "),s("img",{attrs:{src:"/chrome/draw3.png",alt:"DOM树构建过程"}})]),t._v(" "),s("p",[t._v("构建DOM树的输入内容是一个HTML文件，然后经过HTML解析器解析，最终输出树状结构的DOM。\n通过“开发者工具”->“Console”控制台，输出“document”回车后可查看完整的DOM树结构。")]),t._v(" "),s("p",[t._v("可以了解到，DOM和HTML内容几乎是一样的，但是和HTML不同的是，DOM是保持在内存中树状结构，\n可以通过JavaScript来查询和修改内容。")]),t._v(" "),s("p",[t._v("而要让DOM节点拥有正确的样式，需要样式计算。")]),t._v(" "),s("h2",{attrs:{id:"样式计算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#样式计算"}},[t._v("#")]),t._v(" 样式计算")]),t._v(" "),s("p",[t._v("样式计算的目的是为了计算出DOM节点中每个元素的具体样式，该阶段可分成三步：")]),t._v(" "),s("h3",{attrs:{id:"_1、把css转换为浏览器能够解析的结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、把css转换为浏览器能够解析的结构"}},[t._v("#")]),t._v(" 1、把CSS转换为浏览器能够解析的结构")]),t._v(" "),s("p",[t._v("HTML加载CSS的三种方式："),s("br"),t._v(" "),s("img",{attrs:{src:"/chrome/draw4.png",alt:"HTML加载CSS的三种方式"}})]),t._v(" "),s("p",[t._v("CSS样式主要由三种加载方式：")]),t._v(" "),s("ul",[s("li",[t._v("通过link引用的外部CSS文件")]),t._v(" "),s("li",[t._v("style标记内的CSS")]),t._v(" "),s("li",[t._v("元素的style属性内嵌的CSS")])]),t._v(" "),s("p",[t._v("由于浏览器也无法解析纯文本的CSS样式，所以"),s("strong",[t._v("当渲染引擎接收到CSS文本时，\n会将CSS文本转换为浏览器可以理解的结构，styleSheets")]),t._v("。")]),t._v(" "),s("p",[t._v("通过控制台"),s("strong",[t._v("document.styleSheets")]),t._v("可查看结构："),s("br"),t._v(" "),s("img",{attrs:{src:"/chrome/draw5.jpg",alt:"document.styleSheets"}})]),t._v(" "),s("p",[t._v("通过渲染引擎将CSS文本转换为浏览器可识别的styleSheets结构数据，并提供了查询\n和修改功能。")]),t._v(" "),s("h3",{attrs:{id:"_2、标准化样式表中的属性值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、标准化样式表中的属性值"}},[t._v("#")]),t._v(" 2、标准化样式表中的属性值")]),t._v(" "),s("p",[t._v("CSS文本中存在很多属性值，例如1em、blue、bold等属性值不容易被渲染引擎\n识别，所以需要将"),s("strong",[t._v("所有值转换为渲染引擎容易理解的、标准化的计算值")]),t._v("，这个\n过程就是属性值标准化。")]),t._v(" "),s("p",[t._v("标准化属性值："),s("br"),t._v(" "),s("img",{attrs:{src:"/chrome/draw6.png",alt:"标准化属性值"}})]),t._v(" "),s("h3",{attrs:{id:"_3、计算dom数中每个节点的具体样式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、计算dom数中每个节点的具体样式"}},[t._v("#")]),t._v(" 3、计算DOM数中每个节点的具体样式")]),t._v(" "),s("p",[t._v("样式属性标准化后，徐要计算DOM树中每个节点的样式属性，其中涉及"),s("strong",[t._v("CSS的继承规则\n和层叠规则")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"css继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#css继承"}},[t._v("#")]),t._v(" CSS继承")]),t._v(" "),s("p",[s("strong",[t._v("CSS继承就是每个DOM节点都包含了父节点的样式")]),t._v("。例如：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("body "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" font"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("px "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("color"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("blue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("span "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("display"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" none"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("div "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("font"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("weight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" bold"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("color"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("red"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("div p "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("color"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("green"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("应用到DOM节点效果为："),s("br"),t._v(" "),s("img",{attrs:{src:"/chrome/draw7.png",alt:"计算后DOM的样式"}})]),t._v(" "),s("p",[t._v("可了解到，例如body节点的font-size的属性，body节点下的所以子节点\n都继承了。")]),t._v(" "),s("p",[t._v("另可通过“开发者工具”->Element,查看“style”标签："),s("br"),t._v(" "),s("img",{attrs:{src:"/chrome/draw8.png",alt:"样式的继承过程"}})]),t._v(" "),s("p",[t._v("通过分析，我们可以选择对应第一区域对应的元素，可查询改元素的样式(对应区域2中)；\n并且可通过区域3可查看对应样式的来源心情，其中，"),s("strong",[t._v("UserAgent样式，是浏览器\n提供的一组默认样式，如果不修改任何样式，默认使用的是UserAgent样式。")])]),t._v(" "),s("h4",{attrs:{id:"css层叠"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#css层叠"}},[t._v("#")]),t._v(" CSS层叠")]),t._v(" "),s("p",[s("strong",[t._v("层叠是CSS的一个基本特征，它定义了如何合并来自多个源的属性值的算法。\nCSS的全称“层叠样式表”即强调了这点")]),t._v("。")]),t._v(" "),s("p",[t._v("可通过“开发者工具”->Element标签，“Computed”查看最后的计算样式："),s("br"),t._v(" "),s("img",{attrs:{src:"/chrome/draw9.png",alt:"DOM元素最终计算样式"}})]),t._v(" "),s("p",[t._v("样式计算阶段的目的就是为了计算出DOM节点中每个元素的具体样式，在计算过程\n中遵守CSS的继承和层叠两个规则。这个阶段最终输出的内容是每个DOM节点的样式，\n并被保存在ComputdStyle的结构内。")]),t._v(" "),s("h2",{attrs:{id:"布局阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#布局阶段"}},[t._v("#")]),t._v(" 布局阶段")]),t._v(" "),s("p",[t._v("有了DOM树和DOM树中元素的样式，接下来还需要"),s("strong",[t._v("计算出DOM树中可见元素的几何位置，\n这个计算过程叫布局")]),t._v("。")]),t._v(" "),s("p",[t._v("Chrome在布局阶段需完成两个任务：创建布局树和布局计算。")]),t._v(" "),s("h3",{attrs:{id:"_1、创建布局树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、创建布局树"}},[t._v("#")]),t._v(" 1、创建布局树")]),t._v(" "),s("p",[t._v("其中DOM树中还包含很多不可见的元素，例如head标签，display为none属性的元素等。所以"),s("strong",[t._v("在\n显示之前，需要额外构建一颗只包含可见元素的布局树")]),t._v("。")]),t._v(" "),s("p",[t._v("布局树构建过程："),s("br"),t._v(" "),s("img",{attrs:{src:"/chrome/draw10.png",alt:"布局树构建过程"}})]),t._v(" "),s("p",[t._v("为了构建布局树，浏览器需要：")]),t._v(" "),s("ul",[s("li",[t._v("遍历DOM树中所以可见节点，并添加节点到布局中；")]),t._v(" "),s("li",[t._v("忽略不可见的节点，如head标签下的内容，display:none等。")])]),t._v(" "),s("h3",{attrs:{id:"_2、布局计算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、布局计算"}},[t._v("#")]),t._v(" 2、布局计算")]),t._v(" "),s("p",[t._v("有了完整的布局树后，则需计算布局树节点的坐标位置。而HTML采用的是\n流式布局模型，基本原则是按照元素在顺序遍历过程中依次从左到右、从上\n到下的排序方式确定位置区域。当然还存在一些特殊的布局方式，例如通过position\n属性的定位布局和float实现的浮动布局等。")]),t._v(" "),s("p",[t._v("由于布局的计算过程相当复杂，我们先了解大概的布局方式。")]),t._v(" "),s("h2",{attrs:{id:"阶段总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#阶段总结"}},[t._v("#")]),t._v(" 阶段总结")]),t._v(" "),s("p",[t._v("我们了解到了渲染流程的前三个阶段为："),s("strong",[t._v("DOM生成、样式计算和布局")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("浏览器不能直接解析HTML数据，所以第一步需要将其转换为DOM树结构；")]),t._v(" "),s("li",[t._v("生成DOM树后，接着根据CSS样式表，计算DOM树所以节点的样式；")]),t._v(" "),s("li",[t._v("最后根据计算DOM元素的布局信息，保存在布局树中。")])]),t._v(" "),s("h2",{attrs:{id:"分层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分层"}},[t._v("#")]),t._v(" 分层")]),t._v(" "),s("p",[t._v("因为页面中有很多复杂的效果，如3D变换、页面滚动，z-index等，为了实现\n这些效果，"),s("strong",[t._v("渲染引擎还需要为特定的节点生成专用的图层，并生成一颗对应的\n图层树(LayerTree)")]),t._v("。其类似于PS的图层概念。")]),t._v(" "),s("p",[s("strong",[t._v("浏览器的页面实际上被分层了很多图层，这些图层叠加后合成最终的页面")]),t._v("。")]),t._v(" "),s("p",[t._v("布局树和图层树的关系："),s("br"),t._v(" "),s("img",{attrs:{src:"/chrome/draw11.png",alt:"布局树和图层树关系示意图"}})]),t._v(" "),s("p",[t._v("通常情况下，"),s("strong",[t._v("并不是布局树的每个节点都包含一个图层，如果一个节点没有对应的\n层，那么这个节点就从属于父节点的图层")]),t._v("。例如上图的span就从属于父节点图层。")]),t._v(" "),s("p",[t._v("通常满足其下两点中的任意一点即可被提升为单独的一个图层：")]),t._v(" "),s("p",[s("strong",[t._v("第一点，拥有层叠上下文属性的元素会被提升为单独的一层")]),t._v("。")]),t._v(" "),s("p",[t._v("页面是个二维页面，但是层叠上下文能够让HTML元素具有三维概念，这些HTML元素按照\n自身属性的优先级分布在垂直于这个二维页面的z轴上。")]),t._v(" "),s("p",[t._v("层叠上下文示意图："),s("br"),t._v(" "),s("img",{attrs:{src:"/chrome/draw12.png",alt:"层叠上下文示意图"}})]),t._v(" "),s("p",[t._v("例如图中的，定位属性的元素、定义透明度属性的元素、使用CSS滤镜的元素\n等都具有层叠上下文属性。")]),t._v(" "),s("p",[s("strong",[t._v("第二点，需要剪裁的地方也会被创建为图层")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n      div "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            width"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            height"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            overflow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("auto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            background"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" gray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("所以元素有了层叠上下文的属性或者需要被剪裁，那么就会被提升成为单独一层，你可以参看下图："),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("从上图我们可以看到，document层上有"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("和"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("层，而"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("层之上又有两个图层。这些图层组织在一起也是一颗树状结构。"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("图层树是基于布局树来创建的，为了找出哪些元素需要在哪些层中，渲染引擎会遍历布局树来创建层树（Update LayerTree）。"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("例如所示，文字所显示的区域超过了200*200的显示范围时就产生了剪裁，渲染引擎会把剪裁文字内容\n的一部分用于显示在div区域。")]),t._v(" "),s("p",[t._v("出现这种剪裁情况下，渲染引擎会为文字部分单独创建一个层，如果出现滚动条，滚动条也会\n被提升为单独的层。")]),t._v(" "),s("p",[t._v("被裁剪的内容所在单独图层的示意图："),s("br"),t._v(" "),s("img",{attrs:{src:"/chrome/draw13.png",alt:"被裁剪的内容所在单独图层的示意图"}})]),t._v(" "),s("p",[t._v("所以，"),s("strong",[t._v("元素有了层叠上下文的属性或者需要被检查，满足任意一点，就会被提升为单独的一层")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"图层绘制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图层绘制"}},[t._v("#")]),t._v(" 图层绘制")]),t._v(" "),s("p",[t._v("在完成图层树的构建后，渲染引擎会对图层树中的每个图层进行绘制，渲染引擎会把每个图层的\n绘制拆分成很多小的绘制指令，然后再把这些指令按照顺序组成一个待绘制列表。")]),t._v(" "),s("p",[t._v("绘制列表："),s("br"),t._v(" "),s("img",{attrs:{src:"/chrome/draw14.png",alt:"绘制列表"}})]),t._v(" "),s("p",[t._v("绘制列表中的指令其实就是让其执行一个简单的绘制操作，而每个原生的背景、边框等都需要单独\n的指令绘制，通过几条绘制指令来实现绘制一个元素。")]),t._v(" "),s("p",[t._v("“开发者工具”->“Layers”可查看“document”层等的绘制列表过程："),s("br"),t._v(" "),s("img",{attrs:{src:"/chrome/draw15.png",alt:"一个图层的绘制列表"}})]),t._v(" "),s("h2",{attrs:{id:"栅格化操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栅格化操作"}},[t._v("#")]),t._v(" 栅格化操作")]),t._v(" "),s("p",[t._v("绘制列表只是用来记录绘制顺序和绘制指令的列表，实际上绘制操作是由渲染引擎\n中的合成线程来完成的。")]),t._v(" "),s("p",[t._v("渲染进程中的合成线程和主线程："),s("br"),t._v(" "),s("img",{attrs:{src:"/chrome/draw16.png",alt:"渲染进程中的合成线程和主线程"}})]),t._v(" "),s("p",[t._v("当图层的绘制列表准备完成后，主线程会把该绘制列表提交给合成线程。")]),t._v(" "),s("p",[t._v("通常一个页面很大，而用户有时只能看到其中一部分，所以屏幕上页面的可见区域叫视口(ViewPort)。")]),t._v(" "),s("p",[t._v("这种情况下，要绘制出所有图层内容的话产生的开销太多，所以，"),s("strong",[t._v("合成线程会将图层划分为图块(title)")]),t._v("，\n这些图片的大小通常是256"),s("em",[t._v("256或512")]),t._v("512。")]),t._v(" "),s("p",[t._v("图层图块示意图："),s("br"),t._v(" "),s("img",{attrs:{src:"/chrome/draw17.png",alt:"图层划分为图块示意图"}})]),t._v(" "),s("p",[s("strong",[t._v("合成线程会按照视口附件的图块来优先生成位图，实际生成位图的操作是由栅格化来执行的。\n所谓栅格化，是指将图块转换为位图")]),t._v("。而图块是栅格化执行的最小单位。渲染进程\n维护了一个栅格化的线程池，所以的图块栅格化都是在线程池内执行的。")]),t._v(" "),s("p",[t._v("合成线程提交图块给栅格化线程池："),s("br"),t._v(" "),s("img",{attrs:{src:"/chrome/draw18.png",alt:"合成线程提交图块给栅格化线程池"}})]),t._v(" "),s("p",[t._v("通常，栅格化过程都会使用GPU来加速生成，使用GPU生成位图的过程叫快速栅格化或者\nGPU栅格化，渲染进程会把生成图块的指令发送给GPU进程，然后在\nGPU进程中执行生成图块的位图，生成的位图被保存在GPU内存中。")]),t._v(" "),s("p",[t._v("GPU栅格化："),s("br"),t._v(" "),s("img",{attrs:{src:"/chrome/draw19.png",alt:"GPU栅格化"}})]),t._v(" "),s("h2",{attrs:{id:"合成和显示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合成和显示"}},[t._v("#")]),t._v(" 合成和显示")]),t._v(" "),s("p",[t._v("所有图块都被栅格化，合成线程就会生成一个绘制图块的命令，“DrawQuad”，然后\n将该命令提交给浏览器进程。")]),t._v(" "),s("p",[t._v("浏览器进程里面有一个叫viz的组件，用来接收合成线程发过来的DrawQuad命令，然后根据\nDrawQuad命令将其页面内容绘制到内存中，最后将内存显示在屏幕上。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("完整的渲染流水线："),s("br"),t._v(" "),s("img",{attrs:{src:"/chrome/draw20.png",alt:"完整的渲染流水线"}})]),t._v(" "),s("p",[t._v("综上，一个完整的渲染流程为：")]),t._v(" "),s("p",[t._v("1、渲染进程将HTML内容转换为浏览器能识别的"),s("strong",[t._v("DOM树")]),t._v("结构。")]),t._v(" "),s("p",[t._v("2、渲染引擎将CSS样式表转化为浏览器可以理解的"),s("strong",[t._v("styleSheets")]),t._v("，计算出\nDOM节点的样式。")]),t._v(" "),s("p",[t._v("3、创建"),s("strong",[t._v("布局树")]),t._v("，并计算元素的布局信息。")]),t._v(" "),s("p",[t._v("4、对布局树进行分层，并生成"),s("strong",[t._v("分层树")]),t._v("。")]),t._v(" "),s("p",[t._v("5、为每个图层生成"),s("strong",[t._v("绘制列表")]),t._v("，并将其提交给合成线程。")]),t._v(" "),s("p",[t._v("6、合成线程将图层分成"),s("strong",[t._v("图块")]),t._v("，并在"),s("strong",[t._v("栅格化线程池")]),t._v("中将图块转换成位图。")]),t._v(" "),s("p",[t._v("7、合成线程发送绘制图块命令"),s("strong",[t._v("DrawQuad")]),t._v("给浏览器进程。")]),t._v(" "),s("p",[t._v("8、浏览器进程根据DrawQuad消息生成页面，并显示到显示器上。")]),t._v(" "),s("h2",{attrs:{id:"推荐阅读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#推荐阅读"}},[t._v("#")]),t._v(" 推荐阅读")]),t._v(" "),s("p",[t._v("HTML标签："),s("a",{attrs:{href:"https://www.w3school.com.cn/html/html_primary.asp",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.w3school.com.cn/html/html_primary.asp"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("CSS："),s("a",{attrs:{href:"https://www.w3school.com.cn/css/index.asp",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.w3school.com.cn/css/index.asp"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("JavaScript："),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://developer.mozilla.org/zh-CN/docs/Web/JavaScript"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("层叠上下文属性："),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("图解浏览器的工作原理："),s("a",{attrs:{href:"https://www.jianshu.com/p/5a52f2492759",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.jianshu.com/p/5a52f2492759"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=v.exports}}]);